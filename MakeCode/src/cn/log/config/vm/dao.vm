package ${package}.dao.impl;

#set($constants="I"+$vo+"Constants")


#set($voVar=$vo.substring(0, 1).toLowerCase()+$vo.substring(1))
#set($daoimpl=$dao.substring(1)+"Impl")	

#set($insertparam = "")
#set($i = 0 )
#foreach($attribute in $attributeList)
	#set ($i=$i+1) 
	#if($i>1)
		#set($insertparam = $insertparam + " ,")
	#end 
	#set($function=$attribute.atrributeName.substring(0, 1).toUpperCase()+$attribute.atrributeName.substring(1))
	#set($insertparam = $insertparam + $voVar+".get"+$function+"()")
#end

#set($function=$pk.substring(0, 1).toUpperCase()+$pk.substring(1))
#set($pkparam = $voVar+".get"+$function+"()")



import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.apache.commons.dbutils.QueryRunner;
import org.apache.commons.dbutils.ResultSetHandler;
import org.apache.commons.dbutils.handlers.BeanHandler;
import org.apache.commons.dbutils.handlers.BeanListHandler;
import org.apache.commons.dbutils.handlers.ScalarHandler;

import ${package}.dao.${dao};
import ${package}.vo.${vo};
import cn.log.db.util.JdbcUtils;
import cn.log.tool.util.DBHelp;
import ${package}.util.${constants};



/**
 * @author $!{author}
 * @date $!{date}
 * @Description： $!{info}
 */
public class ${daoimpl} implements ${dao} ,${constants}{

	
	/*=======================查询query===========================*/
	
	/* (non-Javadoc)
	 * @see ${package}.dao.${dao}${sp}queryAll${vo}()
	 * @return
	 */
	@SuppressWarnings("unchecked")
	@Override
	public List<${vo}> queryAll${vo}() {
		// TODO Auto-generated method stub
		List<${vo}> ${voVar}s = null;
		try {
			QueryRunner qr = new QueryRunner(JdbcUtils.getDataSource());
			String sql = SQL_QUERY_ALL;
			System.out.println("查询数据，执行sql语句 : "+sql);
			${voVar}s = (List<${vo}>) qr.query(sql,  new BeanListHandler(${vo}.class));
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		return ${voVar}s;
	}

	/* (non-Javadoc)
	 * @see ${package}.dao.${dao}${sp}query${vo}ByCondition(java.lang.String)
	 * @param condition
	 * @return
	 */
	@SuppressWarnings("unchecked")
	@Override
	public List<${vo}> query${vo}ByCondition(String condition) {
		// TODO Auto-generated method stub
		QueryRunner qr = new QueryRunner(JdbcUtils.getDataSource());
		String sql = SQL_QUERY_ALL;
		sql =DBHelp.AddCondition(sql, condition);
		System.out.println("查询数据，执行sql语句 : "+sql);
		List<${vo}> ${voVar}s = null;
		try {
			${voVar}s = (List<${vo}>) qr.query(sql,  new BeanListHandler(${vo}.class));
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return ${voVar}s;
	}

	/* (non-Javadoc)
	 * @see ${package}.dao.${dao}${sp}query${vo}BySql(java.lang.String)
	 * @param sql
	 * @return
	 */
	@Override
	public List<Map> query${vo}BySql(String sql) {
		// TODO Auto-generated method stub
		return null;
	}

	/* (non-Javadoc)
	 * @see ${package}.dao.${dao}${sp}find(${package}.vo.${vo})
	 * @param ${voVar}
	 * @return
	 */
	@SuppressWarnings("deprecation")
	@Override
	public ${vo} find(${vo} ${voVar}) {
		// TODO Auto-generated method stub
		QueryRunner qr = new QueryRunner(JdbcUtils.getDataSource());
		String sql = SQL_FIND_BY_PK;
		System.out.println("查询数据，执行sql语句 : "+sql);
		${vo} vo = null;
		Integer id = ${voVar}.getId();
		try {
			vo =  (${vo}) qr.query(sql,id, new BeanHandler(${vo}.class));
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return vo;
	}

	
	
	
	
	/*=====================插入 insert==========================*/
	
	/* (non-Javadoc)
	 * @see ${package}.dao.${dao}${sp}insert${vo}(${package}.vo.${vo})
	 * @param ${voVar}
	 * @return
	 */
	@Override
	public Object insert${vo}(${vo} ${voVar}) {
		// TODO Auto-generated method stub
		QueryRunner qr = new QueryRunner(JdbcUtils.getDataSource());
		String sql = SQL_INSERT;
		Object params[] = { 
				${insertparam}
				};
		Object object = null;
		
		System.out.println("插入数据，执行sql语句 : "+sql);
		try {
			object = qr.update(sql, params);
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return object;
	}

	/* (non-Javadoc)
	 * @see ${package}.dao.${dao}${sp}insert${vo}(java.util.List)
	 * @param ${voVar}List
	 * @return
	 */
	@Override
	public List<Object> insert${vo}(List<${vo}> ${voVar}List) {
		// TODO Auto-generated method stub
		List<Object> objects = new ArrayList<Object>();
		for (${vo} ${voVar} : ${voVar}List) {
			Object object = insert${vo}(${voVar});
			objects.add(object);
		}
		return objects;
	}
	
	
	
	
	
	/*=====================修改update==========================*/
	
	/* (non-Javadoc)
	 * @see ${package}.dao.${dao}${sp}update${vo}(${package}.vo.${vo})
	 * @param ${voVar}
	 * @return
	 */
	@Override
	public Object update${vo}(${vo} ${voVar}) {
		// TODO Auto-generated method stub
		Object object = null;
		
		try {
			QueryRunner qr = new QueryRunner(JdbcUtils.getDataSource());
			String sql =SQL_INSERT;
			Object params[] = { 
					${insertparam}
					,${pkparam}
					};
			System.out.println("插入数据，执行sql语句 : "+sql);
			object = qr.update(sql, params);

		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return object;
	}

	/* (non-Javadoc)
	 * @see ${package}.dao.${dao}${sp}update${vo}(java.util.List)
	 * @param ${voVar}List
	 * @return
	 */
	@Override
	public List<Object> update${vo}(List<${vo}> ${voVar}List) {
		// TODO Auto-generated method stub
		List<Object> objects = new ArrayList<Object>();
		for (${vo} ${voVar} : ${voVar}List) {
			Object object = update${vo}(${voVar});
			objects.add(object);
		}
		return objects;
	}

	
	
	
	
	
	/*=====================删除delete==========================*/

	/* (non-Javadoc)
	 * @see ${package}.dao.${dao}${sp}delete${vo}(${package}.vo.${vo})
	 * @param ${voVar}
	 * @return
	 */
	@Override
	public Object delete${vo}(${vo} ${voVar}) {
		// TODO Auto-generated method stub
		QueryRunner qr = new QueryRunner(JdbcUtils.getDataSource());
		String sql = SQL_DELETE_MULTI_BY_PKS;
		System.out.println("删除数据，执行sql语句 : "+sql);
		Object params[] = { 
				${pkparam}
				};
		Object object = null;
		try{
			object = qr.update(sql,params);
		}catch (Exception e) {
			e.printStackTrace();
		}
		return object;
	}

	/* (non-Javadoc)
	 * @see ${package}.dao.${dao}${sp}delete${vo}ByCondition(java.lang.String)
	 * @param condition
	 * @return
	 */
	@Override
	public Object delete${vo}ByCondition(String condition) {
		// TODO Auto-generated method stub
		QueryRunner qr = new QueryRunner(JdbcUtils.getDataSource());
		String sql = SQL_DELETE_MULTI_BY_PKS+" "+DEFAULT_QUERY_WHERE_ENABLE+" ";
		sql = DBHelp.AddCondition(sql, condition);
		System.out.println("删除数据，执行sql语句 : "+sql);
		Object object = null;
		try{
			object = qr.update(sql, null);
		}catch (Exception e) {
			e.printStackTrace();
		}
		return object;
	}

	/*=====================获取数目==========================*/
	
	/* (non-Javadoc)
	 * @see ${package}.dao.${dao}${sp}query${vo}TotalNumber()
	 * @return
	 */
	@Override
	public Integer query${vo}TotalNumber() {
		// TODO Auto-generated method stub
		return query${vo}TotalNumber(null);
	}

	/**
	 * 查询${vo}数目
	 * @param condition
	 * @return
	 */
	public Integer query${vo}TotalNumber(String condition){
		Long counts = new Long(0);
		QueryRunner qr = new QueryRunner(JdbcUtils.getDataSource());
		String sql = SQL_COUNT;
		sql = DBHelp.AddCondition(sql, condition);
		System.out.println("查询数据，执行sql语句 : "+sql);
		ResultSetHandler rsh = new ScalarHandler();
		try {
			counts = (Long) qr.query(sql,  rsh);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return new Integer(counts.toString());
	}
}
